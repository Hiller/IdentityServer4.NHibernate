trigger:
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - azure-pipelines.yml
      - GitVersion.yml

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  gitHubConnection: 'albertodall_on_github'
  azureArtifactsFeed: 'bcc33bf9-8305-455e-868a-96a9217439a2'

stages:
- stage: BuildAndTest
  displayName: 'Build and test'
  jobs:
  - job: BuildLib
    displayName: 'Build solution and run tests'
    steps:
    - task: UseDotNet@2
      displayName: 'Install .NET Core SDK 2.2.x'
      inputs:
        version: 2.2.x

    - task: GitVersion@5
      displayName: 'Apply Semantic Versioning'
      inputs:
        runtime: 'core'
        configFilePath: 'GitVersion.yml'
        updateAssemblyInfo: true

    - task: PowerShell@2
      displayName: 'Show build context parameters'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Building package version: $(GitVersion.SemVer)"
          Write-Host "Build triggered by branch: $(Build.SourceBranch)"
        errorActionPreference: 'silentlyContinue'
        pwsh: true

    - task: DotNetCoreCLI@2
      displayName: 'Build library project'
      inputs:
        command: 'build'
        projects: '**/IdentityServer4.NHibernate.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/lib /p:Version=$(GitVersion.SemVer)'
    
    - script: 'sqllocaldb start MSSQLLocalDB'
      displayName: 'Start MSSQLLocalDB instance for integration testing'
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Run integration tests'
      inputs:
        command: test
        projects: '**/IdentityServer4.NHibernate.IntegrationTests.csproj'
        arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
        testRunTitle: 'Integration tests'

    - script: 'sqllocaldb stop MSSQLLocalDB -i'
      displayName: 'Stop MSSQLLocalDB instance'
      condition: always()

    - task: DotNetCoreCLI@2
      displayName: 'Publish Storage project to allow schema scripts creation'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/IdentityServer4.NHibernate.Storage.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/storagelib'
        zipAfterPublish: false
        modifyOutputPath: false

    - task: PowerShell@2
      displayName: 'Create schema scripts'
      inputs:
        targetType: filePath
        filePath: './Export-DatabaseSchemas.ps1'
        arguments: '-PublishPath $(Build.ArtifactStagingDirectory)/storagelib -OutputPath $(Build.ArtifactStagingDirectory)/lib'
        failOnStderr: true
        pwsh: true
    
    - task: DotNetCoreCLI@2
      displayName: Create NuGet package
      inputs:
        command: 'pack'
        packagesToPack: '**/IdentityServer4.NHibernate.csproj'
        packDirectory: '$(Build.ArtifactStagingDirectory)/package'
        nobuild: true
        versioningScheme: 'off'
        buildProperties: 'NuspecFile=$(Build.ArtifactStagingDirectory)/lib/IdentityServer4.Contrib.NHibernate.nuspec;NuspecProperties="version=$(GitVersion.SemVer)"'

    - task: PublishPipelineArtifact@1
      displayName: 'Publish artifact'
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)/package'
        artifact: 'package'

- stage: ReleaseLocalPreview
  displayName: 'Release to local feed as preview'
  dependsOn: BuildAndTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: PublishToFeed
    displayName: 'Publish package to Azure Artifacts feed'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
      
    - task: DotNetCoreCLI@2
      displayName: Publish to feed
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(azureArtifactsFeed)

- stage: ReleaseLocalStable
  displayName: 'Release to local feed as stable'
  dependsOn: BuildAndTest
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
  - job: PublishToFeed
    displayName: 'Publish package to Azure Artifacts feed'
    steps:
    - checkout: none
    - task: DownloadPipelineArtifact@2
      displayName: Download package
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
        
    - task: DotNetCoreCLI@2
      displayName: Publish to feed
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: $(azureArtifactsFeed)
      continueOnError: true

- stage: ReleaseNuGetStable
  displayName: 'Release to NuGet.org'
  dependsOn: ReleaseLocalStable
  condition: and(succeededOrFailed(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
  - job: PublishToFeed
    displayName: 'Publish package to NuGet feed'
    steps:
    - checkout: none
    
    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package
        
    - task: NuGetAuthenticate@0
      displayName: 'Authenticate on NuGet'
      inputs:
        nuGetServiceConnections: 'nuget.org'

    - task: DotNetCoreCLI@2
      displayName: 'Publish to feed'
      inputs:
        command: 'push'
        packagesToPush: '$(Pipeline.Workspace)/package/*.nupkg'
        nuGetFeedType: 'external'
        publishFeedCredentials: 'nuget.org'

- stage: CreateReleaseOnGitHub
  displayName: 'Create release on GitHub'
  dependsOn: ReleaseNuGetStable
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  jobs:
  - job: CreateGitHubRelease
    displayName: 'Create GitHub Release'
    steps:
    - checkout: none

    - task: DownloadPipelineArtifact@2
      displayName: 'Download package'
      inputs:
        buildType: 'current'
        itemPattern: '*.nupkg'
        targetPath: '$(Pipeline.Workspace)/package'
        artifactName: package

    - task: GitHubRelease@1
      displayName: 'Create corresponding release on GitHub'
      inputs:
        gitHubConnection: '$(gitHubConnection)'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(GitVersion.Sha)'
        tagSource: 'userSpecifiedTag'
        title: 'v$(GitVersion.SemVer)'
        assets: '$(Pipeline.Workspace)/package/*.nupkg'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'